(builder) set_zeros(builder b, int n) asm "STZEROES";

(cell, cell, cell, int) load_data() method_id {
    var ds = get_data().begin_parse();
    return (ds~load_dict(),
        ds~load_dict(),
        ds~load_dict(),
        ds~load_grams());
}
() store_data(cell providers, cell orcls, cell p_urls, int free_pool) impure {
    set_data(begin_cell()
        .store_dict(providers)
        .store_dict(orcls)
        .store_dict(p_urls)
        .store_grams(free_pool)
        .end_cell());
}

;; providers dict(int type =>  dict(url => slice p_addr, int price_per_call, int grams_pool, int valid_until) )
;; oracle dict(int address =>  slice(int last_update, int reputation, int calls_interval, int stake ) )

;; type:
;; 0 -> public
;; 1 -> private
;; 2 -> trigger

(int, int, int, int, int) get_oracle(slice s_orcl) method_id {
    return(s_orcl~load_uint(32),
        s_orcl~load_int(32),
        s_orcl~load_uint(32),
        s_orcl~load_grams(),
        s_orcl~load_uint(32));
}

() withdraw(slice s_addr, int amount) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();

    var (s_orcl, f) = udict_get?(orcls, 256, slice_hash(s_addr));
    throw_unless(55, f);
    var (last_call, reput, call_inrv, profit, stake) = get_oracle(s_orcl);
    throw_if(67, profit < amount);
    profit -= amount;

    ;; update oracle
    slice s_orcl = begin_cell()
        .store_uint(last_call, 32)
        .store_int(reput, 32)
        .store_uint(call_inrv, 32) 
        .store_grams(profit)
        .store_uint(stake, 32)
        .end_cell().begin_parse();
    orcls~udict_set(256, slice_hash(s_addr), s_orcl);
    
    ;; send reward
    var msg = begin_cell()
        .store_uint(0xc4ff, 17)
        .store_slice(s_addr)
        .store_grams(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32 + 64)
        .end_cell();
    send_raw_message(msg, 3);

    return store_data(providers, orcls, p_urls, free_pool); 
}

() punish(slice s_addr, int t, cell o_addrs) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    ;; get info about provider
    cell c_type = providers.udict_get_ref(8, t);
    throw_if(52, c_type.null?()); ;; invalid type

    s_addr~skip_bits(3); 
    (slice url, int f) = p_urls.udict_get?(256, slice_hash(s_addr));
    throw_unless(60, f);
    var (prx, s_provider, left, f) = c_type.pfxdict_get?(1023, url);
    throw_unless(53, f & left.slice_empty?()); ;; provider not exists
    var (wc, p_addr, price_per_call, gram_pool, valid_until) = (s_provider~load_int(8), 
        s_provider~load_uint(256),
        s_provider~load_uint(32), 
        s_provider~load_grams(),
        s_provider~load_uint(32));


    (int o_addr, slice s_orcl, int f) = udict_get_min?(o_addrs, 256);
    while (f) {
        (s_orcl, f) = udict_get?(orcls, 256, o_addr);
        throw_unless(55, f);
        var (last_call, reput, call_inrv, profit, stake) = get_oracle(s_orcl);
        
        reput -= 100;
        if (reput < 0) {
            free_pool += stake;
            stake = 0;
        }

        ;; update oracle
        slice s_orcl = begin_cell()
            .store_uint(last_call, 32)
            .store_int(reput, 32)
            .store_uint(call_inrv + 72000, 32) 
            .store_grams(profit)
            .store_uint(stake, 32)
            .end_cell().begin_parse();
        orcls~udict_set(256, o_addr, s_orcl);
        (o_addr, s_orcl, f) = udict_get_next?(o_addrs, 256, o_addr);
    }

    s_provider = begin_cell()
        .store_int(wc, 8)
        .store_uint(p_addr, 256) 
        .store_uint(price_per_call, 32) 
        .store_grams(gram_pool)
        .store_uint(valid_until, 32)
        .end_cell().begin_parse();

    var (c_type, f) = c_type.pfxdict_set?(1023, url, s_provider);
    providers = providers.udict_set_ref(8, t, c_type);
    return store_data(providers, orcls, p_urls, free_pool); 
}

() pay(slice s_addr, int t, int participated, cell o_addrs) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    ;; get info about provider
    cell c_type = providers.udict_get_ref(8, t);
    throw_if(52, c_type.null?()); ;; invalid type

    s_addr~skip_bits(3); 
    (slice url, int f) = p_urls.udict_get?(256, slice_hash(s_addr));
    throw_unless(60, f);
    var (prx, s_provider, left, f) = c_type.pfxdict_get?(1023, url);
    throw_unless(53, f & left.slice_empty?()); ;; provider not exists
    var (wc, p_addr, price_per_call, gram_pool, valid_until) = (s_provider~load_int(8), 
        s_provider~load_uint(256),
        s_provider~load_uint(32), 
        s_provider~load_grams(),
        s_provider~load_uint(32));

    throw_unless(61, gram_pool - price_per_call >= 0); ;; not enough Grams for reward

    int orcl_payment = price_per_call / participated;

    var (o_addr, s_orcl, f) = udict_get_min?(o_addrs, 256);
    while (f & participated) {
        gram_pool -= orcl_payment;
        throw_unless(61, gram_pool >= 0);
        throw_unless(62, participated > 0);
        participated -= 1;

        var (s_orcl, f) = udict_get?(orcls, 256, o_addr);
        throw_unless(55, f);
        var (last_call, reput, call_inrv, profit, stake) = get_oracle(s_orcl);

        ;; update oracle
        slice s_orcl = begin_cell()
            .store_uint(last_call, 32)
            .store_int(reput + 1, 32)
            .store_uint(call_inrv - 10, 32) 
            .store_grams(profit + orcl_payment)
            .store_uint(stake, 32)
            .end_cell().begin_parse();
        orcls~udict_set(256, o_addr, s_orcl);
        (o_addr, s_orcl, f) = udict_get_next?(o_addrs, 256, o_addr);
    }

    s_provider = begin_cell()
        .store_int(wc, 8)
        .store_uint(p_addr, 256) 
        .store_uint(price_per_call, 32) 
        .store_grams(gram_pool)
        .store_uint(valid_until, 32)
        .end_cell().begin_parse();

    var (c_type, f) = c_type.pfxdict_set?(1023, url, s_provider);
    providers = providers.udict_set_ref(8, t, c_type);
    return store_data(providers, orcls, p_urls, free_pool); 
}

() request_data(int msg_value, int t, slice url, cell s_receiver, int time) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    ;; get info about provider
    cell c_type = providers.udict_get_ref(8, t);
    throw_if(52, c_type.null?()); ;; invalid type

    ;; pad with zeros 
    slice url = begin_cell().store_slice(url).set_zeros(8).end_cell().begin_parse();
    var (prx, s_provider, left, f) = c_type.pfxdict_get?(1023, url);
    throw_unless(53, f & left.slice_empty?()); ;; provider not exists
    var (wc, p_addr, price_per_call, gram_pool, valid_until) = (s_provider~load_int(8), 
        s_provider~load_uint(256),
        s_provider~load_uint(32), 
        s_provider~load_grams(),
        s_provider~load_uint(32));

    throw_unless(58, msg_value == price_per_call); ;; not enough Grams for request
    gram_pool += msg_value;

    s_provider = begin_cell()
        .store_int(wc, 8)
        .store_uint(p_addr, 256) 
        .store_uint(price_per_call, 32) 
        .store_grams(gram_pool)
        .store_uint(valid_until, 32) ;; expired in 3 monthes
        .end_cell().begin_parse();

    var (c_type, f) = c_type.pfxdict_set?(1023, url, s_provider);
    providers = providers.udict_set_ref(8, t, c_type);
    store_data(providers, orcls, p_urls, free_pool);
    ;; send data
    var msg = begin_cell()
        .store_uint(0xc4ff, 17)
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(p_addr, 256)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0xbbeeee, 32)
        .store_uint(0, 64)
        .store_ref(s_receiver)
        .store_int(time, 64)
        .end_cell();
    return send_raw_message(msg, 3);     
}

() send_data(slice s_addr, int t, slice url, cell data) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    var (s_orcl, f) = udict_get?(orcls, 256, slice_hash(s_addr));
    throw_unless(55, f);
    var (last_call, reput, call_inrv, profit, stake) = get_oracle(s_orcl);
    throw_if(56, last_call + call_inrv < now());
    throw_if(57, reput < 0);

    ;; update oracle
    slice s_orcl = begin_cell()
        .store_uint(now(), 32)
        .store_int(reput, 32)
        .store_uint(call_inrv, 32) 
        .store_grams(profit)
        .store_uint(stake, 32)
        .end_cell().begin_parse();
    orcls~udict_set(256, slice_hash(s_addr), s_orcl);

    ;; get info about provider
    cell c_type = providers.udict_get_ref(8, t);
    throw_if(52, c_type.null?()); ;; invalid type

    ;; pad with zeros 
    slice url = begin_cell().store_slice(url).set_zeros(8).end_cell().begin_parse();
    var (prx, s_provider, left, f) = c_type.pfxdict_get?(1023, url);
    throw_unless(53, f & left.slice_empty?()); ;; provider not exists
    var (wc, p_addr) = (s_provider~load_int(8), s_provider~load_uint(256));

    ;; send data
    var msg = begin_cell()
        .store_uint(0xc4ff, 17)
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(p_addr, 256)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0xaaeeee, 32)
        .store_uint(0, 64)
        .store_ref(begin_cell().store_slice(s_addr).end_cell())
        .store_ref(data)
        .end_cell();
    send_raw_message(msg, 3);

    return store_data(providers, orcls, p_urls, free_pool);
}

() register_provider(int msg_value, int t, slice url, int wc, int p_addr, int price_per_call) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    throw_unless(51, msg_value == 500000); ;; not enough Grams to register
    cell c_type = providers.udict_get_ref(8, t);
    
    ;; pad with zeros 
    slice url = begin_cell().store_slice(url).set_zeros(8).end_cell().begin_parse();

    ifnot (c_type.null?()) {
        var (prx, val, left, f) = c_type.pfxdict_get?(1023, url);
        throw_if(53, f & left.slice_empty?()); ;; provider exists
    }
    slice s_addr =  begin_cell()
        .store_int(wc, 8)
        .store_uint(p_addr, 256)
        .end_cell()
        .begin_parse();
    slice s_provider = begin_cell()
        .store_slice(s_addr) 
        .store_uint(price_per_call, 32) 
        .store_grams(0)
        .store_uint(now() + 7889229, 32) ;; expired in 3 monthes
        .end_cell().begin_parse();

    var (c_type, f) = c_type.pfxdict_set?(1023, url, s_provider);
    providers~udict_set_ref(8, t, c_type);
    p_urls~udict_set(256, slice_hash(s_addr), url);
    return store_data(providers, orcls, p_urls, free_pool);
}

() register_oracle(int msg_value, slice s_addr) impure {
    var (providers, orcls, p_urls, free_pool) = load_data();
    throw_unless(50, msg_value == 5000); ;; not enough Grams to stake
    slice s_orcl = begin_cell()
        .store_uint(now(), 32)
        .store_int(100, 32) ;; initial reputation
        .store_uint(36000, 32) ;; initial calls_interval, 1 call per 10min
        .store_grams(0)
        .store_uint(msg_value, 32)
        .store_slice(s_addr)
        .end_cell().begin_parse();
    (orcls, int f) = orcls.udict_add?(256, slice_hash(s_addr), s_orcl);
    throw_unless(54, f);
    return store_data(providers, orcls, p_urls, free_pool);
}

() recv_external(slice in_msg) impure {
    var ds = get_data().begin_parse();
    var (init, providers, orcls, p_urls, free_pool) = (ds~load_uint(1), 
        ds~load_dict(),
        ds~load_dict(),
        ds~load_dict(),
        ds~load_grams());
    accept_message();
    return store_data(providers, orcls, p_urls, free_pool);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  slice cs = in_msg_cell.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return ();
  }
  int query_id = in_msg~load_uint(64);
  if (op == 0xaaeeee) {
    return register_oracle(msg_value, s_addr);
  }
  if (op == 0xbbeeee) {
    int t = in_msg~load_uint(8);
    (in_msg, cell url) = in_msg.load_ref();
    (int wc, int p_addr, int price_per_call) = (in_msg~load_int(8), in_msg~load_uint(256), in_msg~load_int(32));
    return register_provider(msg_value, t, url.begin_parse(), wc, p_addr, price_per_call);
  }
  if (op == 0xcceeee) {
    (int t, cell url, cell c_receiver, int time) = (in_msg~load_uint(8), in_msg~load_ref(), in_msg~load_ref(), in_msg.preload_int(64));
    return request_data(msg_value, t, url.begin_parse(), c_receiver, time);
  }
  if (op == 0xddeeee) {
    (int t, cell url, cell data) = (in_msg~load_uint(8), in_msg~load_ref(), in_msg.preload_ref());
    return send_data(s_addr, t, url.begin_parse(), data);
  }
  if (op == 0xeeeeee) {
    (int t, cell o_addrs) = (in_msg~load_uint(8), in_msg.preload_dict());
    return punish(s_addr, t, o_addrs);
  }
  if (op == 0xffeeee) {
    (int t, int participated, cell o_addrs) = (in_msg~load_uint(8), in_msg~load_uint(32), in_msg.preload_dict());
    return pay(s_addr, t, participated, o_addrs);
  }
  if (op == 0xeeaaee) {
    return withdraw(s_addr, in_msg~load_grams());
  }
  return ();
}

() run_ticktock() impure {

}

;; getters
(cell, cell, cell, int) getstorage() method_id {
    var ds = get_data().begin_parse();
    return (ds~load_dict(),
        ds~load_dict(),
        ds~load_dict(),
        ds~load_grams());
}
(int) getstake() method_id {
    return (5000);
}


(int, int, int, int, int) getorclbyurl(int t, slice url) method_id {
    var (providers, orcls, p_urls, free_pool) = load_data();
    ;; get info about provider
    cell c_type = providers.udict_get_ref(8, t);
    throw_if(52, c_type.null?()); ;; invalid type
    slice url = begin_cell().store_slice(url).set_zeros(8).end_cell().begin_parse();
    var (prx, s_provider, left, f) = c_type.pfxdict_get?(1023, url);
    ifnot(f & left.slice_empty?()) {
        return (0, 0, 0, 0, 0);
    }
    return (s_provider~load_int(8), 
        s_provider~load_uint(256),
        s_provider~load_uint(32), 
        s_provider~load_grams(),
        s_provider~load_uint(32));
}

;; TODO:
;; - upgrade protocol
;; - remove_inactive
;; - make addres shorter
;; - protect punish fallback from unfair provider 
;; - create provider from contract
;; - allow few public providers for the same url with different price
;; - allow remove provider by voting
;; - reputation limits
;; - withdraw free coins 