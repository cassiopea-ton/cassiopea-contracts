
(int, int, int, cell, int, int, cell, cell) load_data() method_id {
    var ds = get_data().begin_parse();
    return (ds~load_uint(8 + 256),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_dict(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_dict(),
        ds.preload_dict());
}

() store_data(int register_addr, 
        int min_counter,
        int participated, 
        cell orcls, 
        int frequency, 
        int last_updated_time,
        cell curent_round,
        cell history) impure {
    set_data(begin_cell()
        .store_uint(register_addr, 8 + 256)
        
        .store_uint(min_counter, 32)
        .store_uint(participated, 32)
        .store_dict(orcls)

        .store_uint(frequency, 32) ;; in blocks
        .store_uint(last_updated_time, 32) ;; in blocks
        ;; .store_uint(price_per_call, 32) should be on register

        ;; .store_uint(stake, 32) should be on register
        .store_dict(curent_round)
        .store_dict(history) ;; epoch => (time, data, oracle counter, oracles )
        .end_cell());
}

;; request_data(send_data)

() send_data(slice s_addr, int orcl, int data) impure {
    (int register_addr, 
    int min_counter,
    int participated, 
    cell orcls, 
    int frequency, 
    int last_updated_time,
    cell curent_round,
    cell history) = load_data();

    ;; check if sender has permission, only register can send data
    s_addr~skip_bits(3);
    throw_unless(50, register_addr == s_addr~load_uint(8 + 256)); ;; 100::wc::addr
    
    orcls~idict_set(8 + 256, orcl, begin_cell().store_int(data, 32).end_cell().begin_parse());
    participated += 1;
    (slice s_counter, int f) = curent_round.idict_get?(32, data);
    int counter = 0;
    if (f) {
        counter = s_counter.preload_uint(16);
    }
    curent_round~idict_set(32, data, begin_cell().store_uint(counter + 1, 16).end_cell().begin_parse());

    return store_data(register_addr,  min_counter, participated, orcls, frequency, last_updated_time, curent_round, history);
}

() request_data(slice s_addr, slice receiver, int time) impure {
    (int register_addr, 
    int min_counter,
    int participated, 
    cell orcls, 
    int frequency, 
    int last_updated_time,
    cell curent_round,
    cell history) = load_data();

    ;; check if sender has permission, only register can request data 
    throw_unless(50, register_addr == s_addr.preload_uint(8 + 256)); ;; 100::wc::addr
    var (real_time, epoch_data, f) = udict_get_next?(history, 32, time);
    ifnot (time) {
        (real_time, epoch_data, f) = udict_get_max?(history, 32);
    }
    ifnot (f) {
        ;; send money back
        throw_unless(51, f);
    }

    var (data, participated, orcls) = (epoch_data~load_int(32), 
        epoch_data~load_uint(32),
        epoch_data.preload_dict());

    var msg = begin_cell()
        .store_uint(0xc4ff, 17)
        .store_slice(s_addr)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0xcceeee, 32)
        .store_uint(0, 64)
        .store_uint(participated, 32)
        .store_ref(orcls)
        .end_cell();
    send_raw_message(msg, 3);

    var msg = begin_cell()
        .store_uint(0xc4ff, 17)
        .store_slice(receiver)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0x6f72636c, 32)
        .store_uint(0, 64)
        .store_uint(real_time, 32)
        .store_int(data, 32)
        .end_cell();
    return send_raw_message(msg, 64);
}

() recv_external(slice in_msg) impure {
    var ds = get_data().begin_parse();
    (int init,
    int register_addr, 
    int min_counter,
    int participated, 
    cell orcls, 
    int frequency, 
    int last_updated_time,
    cell curent_round,
    cell history) = (ds~load_uint(1), 
        ds~load_uint(256),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_dict(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_dict(),
        ds.preload_dict());
    accept_message();
    return store_data(register_addr,  min_counter, participated, orcls, frequency, last_updated_time, curent_round, history);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  slice cs = in_msg_cell.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    return ();
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return ();
  }
  int query_id = in_msg~load_uint(64);
  if (op == 0xaaeeee) {
    (int orcl, cell c_data) = (in_msg~load_uint(8 + 256), in_msg.preload_ref());
    return send_data(s_addr.skip_bits(8), orcl, c_data.preload_int(32));
  }
  if (op == 0xbbeeee) {
    int time = in_msg~load_int(64);
    return request_data(s_addr, in_msg, time);
  }
  return ();
}

() run_ticktock() impure {
    (int register_addr, 
    int min_counter,
    int participated, 
    cell orcls, 
    int frequency, 
    int last_updated_time,
    cell curent_round,
    cell history) = load_data();

    if (last_updated_time + frequency < now()) {
        var (data, s_counter, f) = idict_get_min?(curent_round, 32);
        if (f) {
            int counter = s_counter.preload_uint(16);
            ;; look for median
            while (counter < (participated >> 1)) {
                (data, s_counter, f) = idict_get_next?(curent_round, 32, data);
                if (f) {
                    counter += s_counter.preload_uint(16);
                }
            }
            history~udict_set(32, last_updated_time, begin_cell().store_int(data, 32).store_uint(participated, 32).store_dict(orcls).end_cell().begin_parse());            
        }
        last_updated_time = now();
    }

    var (time, epoch_data, f) = udict_get_min?(history, 32);

    ;; data older than half of year hsould be deleted
    while (f & time < now() - 15768000) {
        (history, f) = udict_delete?(history, 32, time);
        (time, epoch_data, f) = udict_get_next?(history, 32, time);
    }

    return store_data(register_addr,  min_counter, participated, orcls, frequency, last_updated_time, curent_round, history);

}

;; getters
(int, int, int, cell, int, int, cell, cell) getstorage() method_id {
    return load_data();
}

;; TODO:
;; - send_money_back
;; - return to configurable op 