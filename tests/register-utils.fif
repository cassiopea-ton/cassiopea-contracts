#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

variable updated_storage
variable amount
variable idx
variable int_msg_body
variable int_message
"./build/new-public-oracle" constant provider-file-base
provider-file-base +".addr" load-address 2constant p_addr

{ { ."success " cr } { "test failed" abort } cond } : test_ret_value
{ swap 0= test_ret_value } : test_code
{ = test_ret_value } : test_code_fail
{ { ."success " cr } { " contract state error: " abort } cond } : test_state
100000 constant timeout
true constant bounce

"build/register-code.fif" include <s constant register-code
"build/public-oracle-code.fif" include <s constant public-oracle-code
<b
    0 1 u,
    dictnew dict,
    dictnew dict,
    dictnew dict,
    0 Gram,
b> constant preinitial_storage
<b 
    dictnew dict,
    dictnew dict,
    dictnew dict,
    0 Gram,
b> constant initial_storage

"build/register-oracle.boc" file>B B>boc int_msg_body ! 
"build/new-register" constant file-base
file-base +".addr" load-address 2constant dest_addr

0 tuple 0x076ef1ea ,
0 , 0 , 
1570470873 ,
1 , 1 , 0 , 
0 tuple 9223372036854775807 , dictnew , , 
dest_addr nip , dictnew , 
1 tuple 
constant c7

{ <b b{00} s, bounce 1 i, b{0100} s, -1 <b idx @ 32 u, b> hashu addr, b{100} s, dest_addr addr, amount @ Gram, 0 9 64 32 + + 1+ u, 
int_msg_body @ <s 2dup s-fits? not rot over 1 i, -rot { drop int_msg_body @ ref, } { s, } cond b>  int_message ! } : prepare-internal-msg

{ <b b{00} s, bounce 1 i, b{0100} s, p_addr addr, b{100} s, dest_addr addr, amount @ Gram, 0 9 64 32 + + 1+ u, 
int_msg_body @ <s 2dup s-fits? not rot over 1 i, -rot { drop int_msg_body @ ref, } { s, } cond b>  int_message ! } : prepare-internal-provider-msg